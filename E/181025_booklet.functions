# --------------------------------------------------------------------------- %
# ADD FORMAT FOR TEX
# --------------------------------------------------------------------------- %
# RISOGRAD
  if [ `grep -s "% SIZE IS SET" ${TMPID}.preamble | wc -l` -lt 1 ]
  then
  echo "% SIZE IS SET"                                 >> ${TMPID}.preamble
  echo "\usepackage{geometry}"                         >> ${TMPID}.preamble
  echo "\geometry{paperwidth=136mm,paperheight=186mm}" >> ${TMPID}.preamble
  fi
# --------------------------------------------------------------------------- #

function PDFXTITLE()  { THISPDFXTITLE="$*";  }
function PDFXAUTHOR() { THISPDFXAUTHOR="$*"; }
function PDFXORG()    { THISPDFXORG="$*";    }
function MKPDFXCOMPLIANT() {

  COLORPROFILE="$INCLUDEPATH/../lib/icc/FOGRA39L.icc"

  pdfxrequired() {

   # PDF/X COMPLIANCY
   # ---------------- #
     echo "\usepackage[x-1a]{pdfx}"                     >> ${TMPID}.preamble
     echo "<?xpacket begin=''
            id='W5M0MpCehiHzreSzNTczkc9d'?>"            > $TMPDIR/pdfx-1a.xmp
     cp "$COLORPROFILE" $TMPDIR
     echo "\Keywords{pdfTeX\sep PDF/X-1a\sep PDF/A-b}
     \Title{${THISPDFXTITLE}}
     \Author{${THISPDFXAUTHOR}}
     \Org{${THISPDFXORG}}
     \Doi{123456789}" > ${TMPID}.xmpdata
     echo '\pdfpageattr{/MediaBox [0 0 385 527]
                  /TrimBox [8 8 368 510]}
           \pdfcatalog{
           /OutputIntents [ <<
          /Info (none)
         /Type /OutputIntent
        /S /GTS_PDFX
       /OutputConditionIdentifier (OFCOM_PO_P1_F60_95)
      /RegistryName (http://www.color.org/)
      >> ]
          }'                                            >> ${TMPID}.preamble
   }

 # ------------------------------------------------------------------------- # 
 # DO IT AT THE END 
 # ------------------------------------------------------------------------- # 
   if [ "$OUTPUTFORMAT" == pdf ];then

       # ADD ONLY ONCE 
         if [ `echo $preOutput | grep modTeX | wc -l ` -lt 1 ];then
               preOutput="$preOutput pdfxrequired"
         fi
   fi

}

# --------------------------------------------------------------------------- #
  if [ `grep -s "% MAKE PAGE AMOUNT DIVIDABLE BY 4" ${TMPID}.preamble | #
        wc -l` -lt 1 ];then
        echo "% MAKE PAGE AMOUNT DIVIDABLE BY 4 
              % (-2 FOR BACK COVER)" >> ${TMPID}.preamble
      # https://groups.google.com/forum/#!topic/de.comp.text.tex/j8wWMv8lZaM
        echo '\newcount\vs
              \newcount\vsi
              \newcommand\clearforend{
               \mbox{}\clearpage
               \pagestyle{empty}
               \vs\thepage
               \advance\vs by 3
               \vsi\vs
               \divide\vs by 4
               \multiply\vs by 4
              \ifnum\vs=\vsi\else\clearforend\fi
        }' >> ${TMPID}.preamble
  fi
# --------------------------------------------------------------------------- #

# =========================================================================== #
# SHARED SVG FUNCTIONS
# =========================================================================== #
  function svgonlines() {

  SVGIN="$1"
    OUT="$2"
# --------------------------------------------------------------------------- #
  BFOO=`echo N${RANDOM}FO0 | cut -c 1-8`
  SFOO=`echo S${RANDOM}F0O | cut -c 1-8`
# --------------------------------------------------------------------------- #
# MOVE ALL LAYERS ON SEPARATE LINES (TEMPORARILY; EASIFY PARSING LATER ON)
# --------------------------------------------------------------------------- #
  sed ":a;N;\$!ba;s/\n/$BFOO/g" $SVGIN   | # REMOVE ALL LINEBREAKS (BUT SAVE)
  sed "s/ /$SFOO/g"                      | # REMOVE ALL SPACE (BUT SAVE)
  sed 's/<g/4Fgt7RfjIoPg7/g'             | # PLACEHOLDER FOR GROUP OPEN
  sed ':a;N;$!ba;s/\n/ /g'               | # REMOVE ALL NEW LINES
  sed 's/4Fgt7RfjIoPg7/\n<g/g'           | # RESTORE GROUP OPEN + NEWLINE
  sed '/groupmode="layer"/s/<g/4Fgt7R/g' | # PLACEHOLDER FOR LAYERGROUP OPEN
  sed ':a;N;$!ba;s/\n/ /g'               | # REMOVE ALL LINEBREAKS
  sed 's/4Fgt7R/\n<g/g'                  | # RESTORE LAYERGROUP OPEN + NEWLINE
  sed 's/<\/svg>/\n&/g'                  | # PUT SVG CLOSE ON NEW LINE
  sed 's/display:none/display:inline/g'  | # MAKE VISIBLE EVEN WHEN HIDDEN
  tee > ${OUT}                             # WRITE TO TEMPORARY FILE
# --------------------------------------------------------------------------- #

  }
# =========================================================================== #

# --------------------------------------------------------------------------- #

function FRONTCOVER() {

  CROP="0.00";CANVASWIDTH="481.88"
  SVGSRC="$1";SVGGET=${TMPID}`echo $PDFSRC | md5sum | cut -c 1-4`.svg
  if [ ! -f $SVGGET ]; then getFile $SVGSRC $SVGGET ;fi
  OUT=$TMPID`echo $SVGGET | md5sum | cut -c 1-8`.lines
 
  if [ ! -f $OUT ]; then svgonlines $SVGGET $OUT ; fi

  XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
  TRANSFORM="transform=\"translate($XSHIFT,0)\""
  head -n 1 $OUT              >  supertmp.svg
  echo "<g $TRANSFORM>"       >> supertmp.svg
  grep 'label=\"AUSSEN' $OUT  >> supertmp.svg
  echo "</g></svg>"           >> supertmp.svg
  sed -i "s/$BFOO/\n/g" supertmp.svg
  sed -i "s/$SFOO/ /g"  supertmp.svg
  inkscape --export-pdf=1.pdf \
           --export-text-to-path supertmp.svg
  conformColor 1.pdf
  XSHIFT="-$CROP"
  TRANSFORM="transform=\"translate($XSHIFT,0)\""
  head -n 1 $OUT              >  supertmp.svg
  echo "<g $TRANSFORM>"       >> supertmp.svg
  grep 'label=\"INNEN' $OUT   >> supertmp.svg
  echo "</g></svg>"           >> supertmp.svg
  sed -i "s/$BFOO/\n/g" supertmp.svg
  sed -i "s/$SFOO/ /g"  supertmp.svg
  inkscape --export-pdf=2.pdf \
           --export-text-to-path supertmp.svg
  conformColor 2.pdf
  pdftk 1.pdf 2.pdf cat output ${TMPID}frontcover.pdf

  write2src "\includepdf[scale=1,pages=1-2]{${TMPID}frontcover.pdf}"
  write2src "\setcounter{page}{1}"

  rm supertmp.svg 1.pdf 2.pdf

}

# --------------------------------------------------------------------------- #

function BACKCOVER() {

  CROP="0.00";CANVASWIDTH="481.88"
  SVGSRC="$1";SVGGET=${TMPID}`echo $PDFSRC | md5sum | cut -c 1-4`.svg
  if [ ! -f $SVGGET ]; then getFile $SVGSRC $SVGGET ;fi
  OUT=$TMPID`echo $SVGGET | md5sum | cut -c 1-8`.lines
 
  if [ ! -f $OUT ]; then svgonlines $SVGGET $OUT ; fi

  XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
  TRANSFORM="transform=\"translate($XSHIFT,0)\""
  head -n 1 $OUT              >  supertmp.svg
  echo "<g $TRANSFORM>"       >> supertmp.svg
  grep 'label=\"INNEN' $OUT   >> supertmp.svg
  echo "</g></svg>"           >> supertmp.svg
  sed -i "s/$BFOO/\n/g" supertmp.svg
  sed -i "s/$SFOO/ /g"  supertmp.svg
  inkscape --export-pdf=2.pdf \
           --export-text-to-path supertmp.svg
  conformColor 2.pdf
  XSHIFT="-$CROP"
  TRANSFORM="transform=\"translate($XSHIFT,0)\""
  head -n 1 $OUT              >  supertmp.svg
  echo "<g $TRANSFORM>"       >> supertmp.svg
  grep 'label=\"AUSSEN' $OUT  >> supertmp.svg
  echo "</g></svg>"           >> supertmp.svg
  sed -i "s/$BFOO/\n/g" supertmp.svg
  sed -i "s/$SFOO/ /g"  supertmp.svg
  inkscape --export-pdf=1.pdf \
           --export-text-to-path supertmp.svg
  conformColor 1.pdf
  pdftk 2.pdf 1.pdf cat output ${TMPID}backcover.pdf

  write2src "\clearforend"
  write2src "\includepdf[scale=1,pages=1-2]{${TMPID}backcover.pdf}"

  rm supertmp.svg 1.pdf 2.pdf
}

# --------------------------------------------------------------------------- #

