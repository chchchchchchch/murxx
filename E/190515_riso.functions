
# =========================================================================== #
# =========================================================================== #

 function mkPdf() {

  TMPTEX=${TMPID}.tex
# --------------------------------------------------------------------------- #
# WRITE TEX SOURCE
# --------------------------------------------------------------------------- #
  echo "\documentclass[fontsize=8pt,cleardoublepage=empty]{scrbook}" > $TMPTEX
  if [ -f ${TMPID}.preamble ];then cat ${TMPID}.preamble        >> $TMPTEX ;fi
  echo "\begin{document}"                                           >> $TMPTEX
  cat   $SRCDUMP                                                    >> $TMPTEX
  echo "\end{document}"                                             >> $TMPTEX

  if [ `echo $THISDOCUMENTCLASS | wc -c` -gt 2 ]; then
  sed -i "s/^\\\documentclass.*}$/\\\documentclass$THISDOCUMENTCLASS/" $TMPTEX
  fi
# --------------------------------------------------------------------------- #
# MAKE PDF
# --------------------------------------------------------------------------- #
  pdflatex -interaction=nonstopmode  \
           -output-directory $TMPDIR $TMPTEX    # > /dev/null
  if [ -f ${TMPID}.pdf ];then
         ROUND=0;while [ "$ROUND" -lt 10 ];do
         for D in $midOutput; do $D ;done
         pdflatex -interaction=nonstopmode  \
                  -output-directory $TMPDIR $TMPTEX > /dev/null
         ROUND=`expr $ROUND + 1`; # echo $ROUND
         done
         mv ${TMPID}.pdf $OUTPUT
  else
         echo "SOMETHING WENT WRONG."
  fi

 }

# =========================================================================== #
  # ----------------------------------------------------------------------- #
  # DEFINITIONS SPECIFIC TO OUTPUT
  # ----------------------------------------------------------------------- #
    PANDOCACTION="pandoc --ascii --no-wrap --listings -r markdown -w latex"
  # ----------------------------------------------------------------------- #
  # FOOTNOTES
  # \footnote{the end is near, the text is here}
  # ----------------------------------------------------------------------- #
    FOOTNOTEOPEN="\footnote{" ; FOOTNOTECLOSE="}"
  # CITATIONS
  # \cite{phillips:2004:vectoraesthetic}
  # ----------------------------------------------------------------------- #
    CITEOPEN="\cite{"   ; CITECLOSE="}"
  # ----------------------------------------------------------------------- #
    CITEPOPEN="\citep[" ; CITEPCLOSE="]{"
  # ----------------------------------------------------------------------- #
  # COMMENT
  # -------
    COMSTART=''; COMCLOSE=''
  # ======================================================================= #

    lastAction="mkPdf"

# =========================================================================== #
# H A N D L E   C O L O R S
# =========================================================================== #
  function pdfxgs(){ sleep 0; }
  function pdfxcmyk(){ sleep 0; }
  function conformColor(){ sleep 0; }
# =========================================================================== #
# --------------------------------------------------------------------------- #

function RISOEINS(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^#[0-9A-Fa-f]{6}$"` #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOZWEI(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^#[0-9A-Fa-f]{6}$"` #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISODREI(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^#[0-9A-Fa-f]{6}$"` #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOVIER(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^#[0-9A-Fa-f]{6}$"` #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOFUNF(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^#[0-9A-Fa-f]{6}$"` #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }

# --------------------------------------------------------------------------- #
  SHSRCID=`echo $BASH_SOURCE | md5sum | cut -c 1-12`
# --------------------------------------------------------------------------- #
  function svglayers2pdfpages() {

     CROP="0.00" # 3mm in px
     SVGLAYER="$1";PDFPAGES="$2"
     SUPERTMP=${TMPID}.`echo $SVGL | md5sum | cut -c 1-4`.tmp
     CANVASWIDTH=`sed ':a;N;$!ba;s/\n//g' $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/width=/\n&/g'              | # EXTRACT WIDTH
                  grep "^width="                    | # EXTRACT WIDTH
                  cut -d "\"" -f 2                  | # EXTRACT WIDTH VALUE
                  head -n 1`                          # FIRST WIDTH ONLY
      LAYERNAMES=`sed ':a;N;$!ba;s/\n//g' $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/>/&\n/g'                   | # ALL '>' ON NEWLINE
                  sed '/<g/s/scape:label/\nlabel/'  | # PUT NAME LABEL ON NL
                  grep -n ^label                    | # SELECT LABELS
                  cut -d "\"" -f 1,2                | # EXTRACT LABELS
                  sort -t= -k 2 -u | sort -n        | # SORT/UNIQ + SORT NUM
                  grep -v "=\"XX_"                  | # IGNORE XX LAYERS
                  cut -d '"' -f 2`                    # EXTRACT NAMES

      BFOO=NL`echo ${RANDOM} | cut -c 1`F00
      SFOO=SP`echo ${RANDOM} | cut -c 1`F0O
     LOPEN=LA`echo ${RANDOM} | cut -c 2`F0P
   # ----------------------------------------------------------------------- #
   # MOVE LAYERS ON SEPARATE LINES (TEMPORARILY; EASIFY PARSING LATER ON)
   # ----------------------------------------------------------------------- #
     sed ":a;N;\$!ba;s/\n/$BFOO/g" $SVGLAYER | # RM ALL LINEBREAKS (BUT SAVE)
     sed "s/ /$SFOO/g"                       | # RM ALL SPACE (BUT SAVE)
     sed 's/<g/\n<g/g'                       | # REDO GROUP OPEN + NEWLINE
     sed "/mode=\"layer\"/s/<g/$LOPEN/g"     | # PLACEHOLDER FOR LAYERGROUP OPEN
     sed ':a;N;$!ba;s/\n//g'                 | # RM ALL LINEBREAKS (AGAIN)
     sed "s/$LOPEN/\n<g/g"                   | # REDO LAYERGROUP OPEN + NEWLINE
     sed '/^[ ]*$/d'                         | # RM EMPTY LINES
     sed 's/<\/svg>/\n&/g'                   | # PUT SVG CLOSE ON NEW LINE
     sed 's/display:none/display:inline/g'   | # MAKE VISIBLE EVEN WHEN HIDDEN
     tee > ${SUPERTMP}                         # WRITE TO TEMPORARY FILE

   # ----------------------------------------------------------------------- #
   # WRITE LAYERS TO SEPARATE FILES AND TRANSFORM TO PDF 
   # ----------------------------------------------------------------------- #
     COUNT=1 
     for LAYERNAME in $LAYERNAMES
      do for PAGE in 1 2
         do  if [ $PAGE -eq 1 ]; then
                  XSHIFT=-$CROP
             else XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
             fi
             TRANSFORM="transform=\"translate($XSHIFT,0)\""
             NUM=`echo 0000$COUNT | rev | cut -c 1-4 | rev`
             LNAME=`echo $LAYERNAME | md5sum | cut -c 1-6`
                head -n 1 ${SUPERTMP}  | # THE HEADER
                sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
                sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
                tee                    >   ${TMPID}_${NUM}_${LNAME}.svg
                echo "<g $TRANSFORM>"  >>  ${TMPID}_${NUM}_${LNAME}.svg
                grep "inkscape:label=\"$LAYERNAME\"" ${SUPERTMP} | #
                sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
                sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
                tee                    >>  ${TMPID}_${NUM}_${LNAME}.svg
                echo "</g>"            >>  ${TMPID}_${NUM}_${LNAME}.svg
                echo "</svg>"          >>  ${TMPID}_${NUM}_${LNAME}.svg 


                PAGENAME="${TMPID}_${NUM}_${LNAME}"
                inkscape --export-pdf=${PAGENAME}.pdf \
                         --export-text-to-path ${PAGENAME}.svg
                rm ${PAGENAME}.svg
             COUNT=`expr $COUNT + 1`
         done
     done
   # ----------------------------------------------------------------------- #
   # MAKE MULTIPAGE PDF
   # ----------------------------------------------------------------------- #
     pdftk ${TMPID}_*.pdf cat output $PDFPAGES
   # ----------------------------------------------------------------------- #
   # CLEAN UP(OBSOLETE?)
   # ----------------------------------------------------------------------- #
     rm ${TMPID}_*.pdf $SVGLAYER



  }
# --------------------------------------------------------------------------- #
# CREATE UNIQUE NAME FOR MACROS USED HERE
# --------------------------------------------------------------------------- #

  SPREADMACRO="\\"`echo spread+txt$SHSRCID | md5sum | base64   | #
                   tr [:upper:] [:lower:]  | sed 's/[^a-z]//g' | #
                   cut -c 1-12`

  if [ `grep ${SPREADMACRO} $SRCDUMP | wc -l` -lt 1 ]
  then        
        write2src " % ------------------------------------------------ %"
        write2src "   \newcommand${SPREADMACRO}[3]{%"
        write2src "    \AddToShipoutPictureFG*{%"
        write2src "    \opacity{1.0}% SET TO 100%"
        write2src "    \includegraphics[width=\paperwidth,page=#2]{#1}"
        write2src "    }"
        write2src "    \vspace*{.5\textheight}\newpage"
        write2src "   }"
        write2src " % ------------------------------------------------ %"
  fi 

# --------------------------------------------------------------------------- #

function SPREAD() {

   mkpages $* --keeptmp

   FIRSTPAGEIS="" # RESET
   NUMPAGES=`pdftk $PDFGET dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

 # EXTRACT PAGE FLAG VALUES
 # ------------------------------------------------------------------------ #
   PAGES=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          egrep -v "^-|-$"            | # IGNORE ISOLATED - 
          grep -v "^[ ]*$" | tail -n 1` # 
   if   [ `echo $PAGES | wc -c` -le 1 ] # PAGES ARE NOT SET
   then  PAGES="-"
   elif [ `echo $PAGES | grep "^[0-9]" | # PAGES DO ACTUALLY ...
           wc -l` -ge 1 ]                # ... START WITH A NUMBER
   then  P1=`echo $PAGES | cut -d "-" -f 1` # SET P1 TO NUM BEFORE DASH
         P2=`echo $PAGES               | # DISPLAY PAGE FLAG
             sed 's/^[0-9]*-/-/'       | # CONVERT LEADING NUMBERS TO DASH
             grep "-" | cut -d "-" -f 2` # SELECT AND CUT LEADING DASH
   else  PAGES="-" ; PAGECOMMAND=""; fi      # DEFINE FALLBACK

 # CONFORM PAGE VALUES
 # ------------------------------------------------------------------------ #
   if [ "$P1" != "" ] # IF P1 IS SET
   then if [ "$P1" -gt "$NUMPAGES" ];then P1="$NUMPAGES"; fi;fi

   if [ "$P2" != "" ]                 # IF P2 IS SET
    then if [ "$P2" -gt "$NUMPAGES" ] # IF P2 IS GREATER THAN MAX PAGE NUMBER ...
         then P2="$NUMPAGES"          # ... SET TO MAX PAGE NUMBER
         fi;  PAGESEQ=`seq $P1 $P2`   # SET PAGE SEQUENCE
         if [ "$P2" -lt "$P1" ]       # IF P2 IS BIGGER THAN P1
         then PAGESEQ=`seq $P2 $P1  | # START PAGE SEQUENCE FROM LOWER VALUE
                       tac`           # ... AND REVERT
         fi
   else PAGESEQ="$P1"                 # IF P2 IS NOT SET PAGE SEQUENCE = P1
   fi
   if [ "$PAGES" == "-" ];then        # IF PAGE FLAG REQUIRES ALL ...
         P1="1";P2="$NUMPAGES"        # ... SET PAGE SEQUENCE ...
         PAGESEQ=`seq $P2`            # ... TO MAX PAGE NUMBER
   fi

   if [ `python -c "print $P1 / 2.0" | # DIVIDE BY 2
         cut -d "." -f 2` -lt 1 ]      # CUT AND CHECK VALUE AFTER .
   then  FIRSTPAGEIS="even"            # IF = 0 -> PAGE IS EVEN
   else  FIRSTPAGEIS="odd"             # IF > 0 -> PAGE IS ODD
   fi    

   if   [ "$FIRSTPAGEIS" == "odd" ]; then
           PAGECOMMAND="\cleartoleft"
   elif [ "$FIRSTPAGEIS" == "even" ]; then
           PAGECOMMAND="\cleartoright"
   else  # ALL PAGES -> P1 = 1
           PAGECOMMAND="\cleartoleft"
   fi

 # ALLOW IRREGULAR PLACEMENT
 # ----
   if [ `echo $PAGES | grep -v "-" | # RM - AND 0-9 => 2 -gt 0
         wc -l` -gt 0 ];then  PAGECOMMAND=""; fi

   if [ -f $PDFGET ]
   then write2src "\grenewcommand{\pushpage}{}"
        write2src "\newpage"
        write2src "$PAGECOMMAND"
        for PAGENUM in $PAGESEQ
         do
            PDFTXT=`ls ${PDFGET}* | grep "0\{1,\}${PAGENUM}.txt"`
            write2src "${SPREADMACRO}{$PDFGET}{$PAGENUM}{%"
            cat "$PDFTXT" 2> /dev/null | sed '/^$/d' >> $SRCDUMP
            write2src "}"
        done
        write2src "\grenewcommand{\pushpage}{\pusher}" 
   fi

}

# --------------------------------------------------------------------------- #

function BACKGROUND() {

   mkpages $* --keeptmp

   NUMPAGES=`pdftk $PDFGET dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

   if [ -f $PDFGET ]
   then write2src "\setcounter{pageloopmax}{$NUMPAGES}"
        write2src "\renewcommand{\pageloopsrc}{$PDFGET}"
   else write2src "\renewcommand{\pageloopsrc}{}"
   fi

}

# --------------------------------------------------------------------------- #

