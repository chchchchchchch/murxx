# =========================================================================== #
# =========================================================================== #

 function mkPdf() {

  TMPTEX=${TMPID}.tex
# --------------------------------------------------------------------------- #
  for COLOR in $ALLCOLORS
   do 
# --------------------------------------------------------------------------- #
# WRITE TEX SOURCE
# --------------------------------------------------------------------------- #
  echo "\documentclass[fontsize=8pt,cleardoublepage=empty]{scrbook}" > $TMPTEX
  if [ -f ${TMPID}.preamble ]
  then cat ${TMPID}.preamble                                        >> $TMPTEX
  fi

  if [ "$COLOR" == "$TXTCOLOR" ]
  then echo "\begin{document}\renewcommand{\txtopacity}{1.0}"       >> $TMPTEX
  else echo "\begin{document}\renewcommand{\txtopacity}{0.0}"       >> $TMPTEX
  fi

  cat   $SRCDUMP                                                    >> $TMPTEX
  echo "\end{document}"                                             >> $TMPTEX

  if [ `echo $THISDOCUMENTCLASS | wc -c` -gt 2 ]; then
  sed -i "s/^\\\documentclass.*}$/\\\documentclass$THISDOCUMENTCLASS/" $TMPTEX
  fi
# --------------------------------------------------------------------------- #
  for CSRC in `egrep "[0-9a-f]{8}COLOR[0-9a-f]{6}" $TMPTEX    | #
                   sed 's/\(.*\)\([0-9a-f]\{8\}COLOR\)\(.*\)/\2/' | #
                   sort -u`
    do sed -i "s/$CSRC[0-9a-f]\{6\}/$CSRC$COLOR/g" $TMPTEX
  done              
# --------------------------------------------------------------------------- #
# WRITE TEX SOURCE
# --------------------------------------------------------------------------- #
  pdflatex -interaction=nonstopmode  \
           -output-directory $TMPDIR $TMPTEX    # > /dev/null
  if [ -f ${TMPID}.pdf ];then
         ROUND=0;while [ "$ROUND" -lt 2 ];do
         for D in $midOutput; do $D ;done
         pdflatex -interaction=nonstopmode  \
                  -output-directory $TMPDIR $TMPTEX > /dev/null
         ROUND=`expr $ROUND + 1`; # echo $ROUND
         done
         mv ${TMPID}.pdf ${OUTPUT%%.*}.$COLOR.pdf
  else
         echo "SOMETHING WENT WRONG."
  fi
# --------------------------------------------------------------------------- #
  done
# --------------------------------------------------------------------------- #

 }

# =========================================================================== #
  # ----------------------------------------------------------------------- #
  # DEFINITIONS SPECIFIC TO OUTPUT
  # ----------------------------------------------------------------------- #
    PANDOCACTION="pandoc --ascii --no-wrap --listings -r markdown -w latex"
  # ----------------------------------------------------------------------- #
  # FOOTNOTES
  # \footnote{the end is near, the text is here}
  # ----------------------------------------------------------------------- #
    FOOTNOTEOPEN="\footnote{" ; FOOTNOTECLOSE="}"
  # CITATIONS
  # \cite{phillips:2004:vectoraesthetic}
  # ----------------------------------------------------------------------- #
    CITEOPEN="\cite{"   ; CITECLOSE="}"
  # ----------------------------------------------------------------------- #
    CITEPOPEN="\citep[" ; CITEPCLOSE="]{"
  # ----------------------------------------------------------------------- #
  # COMMENT
  # -------
    COMSTART=''; COMCLOSE=''
  # ======================================================================= #

    lastAction="mkPdf"

# =========================================================================== #
# H A N D L E   C O L O R S (OVERWRITE)
# =========================================================================== #
  function pdfxgs(){ sleep 0; }
  function pdfxcmyk(){ sleep 0; }
  function conformColor(){ sleep 0; }
# =========================================================================== #
# --------------------------------------------------------------------------- #
  SHSRCID=`echo $BASH_SOURCE | md5sum | cut -c 1-12`
# --------------------------------------------------------------------------- #

function RISOEINS(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^[0-9A-Fa-f]{6}$"`  #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOZWEI(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^[0-9A-Fa-f]{6}$"`  #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISODREI(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^[0-9A-Fa-f]{6}$"`  #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOVIER(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^[0-9A-Fa-f]{6}$"`  #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function RISOFUNF(){ THISCOLOR=`echo $* | sed 's/ /\n/g' | #
                                egrep "^[0-9A-Fa-f]{6}$"`  #
                     ALLCOLORS="$ALLCOLORS $THISCOLOR";    }
function TXTCOLOR(){ TXTCOLOR=`echo $* | sed 's/ /\n/g' | #
                               egrep "^[0-9A-Fa-f]{6}$"`;  }
function SUBCOLOR(){ SUBCOLOR=`echo $* | sed 's/ /\n/g' | #
                               egrep "^[0-9A-Fa-f]{6}$"`;  }
# --------------------------------------------------------------------------- #
 # ------------------------------------------- #
   function map(){ # THANKS TO M.MURTAUGH!
     I=$1;INLO=$2;INHI=$3;OUTLO=$4;OUTHI=$5
     P=$(((I*100000)/(INHI-INLO)))
     O=$((OUTLO + (P * (OUTHI-OUTLO)/100000)))
     echo $O
   }
 # ------------------------------------------- #
# --------------------------------------------------------------------------- #
  function selectColor(){(

     SVG="$1";OUT="$2";BASECOLOR="$3"

     RGBMAIN=`echo $BASECOLOR       | # START
              grep 'ff'             | # REQUIRE ONE FULL CHANNEL
              sed 's/../\n&/g'      | # SEPARATE RGB CHANNELS
              sed '/^ff$/!s/./\./g' | # INSERT . INSTEAD OF VALUE
              tr -d '\n'`             # RM NEWLINES
     RGBPLUS=`echo $RGBMAIN   | # START WITH $RGBMAIN
              sed 's/./&\n/g' | # PUT ALL CHARS ON SEPARATE LINES
              grep -n ""      | # NUMBER LINES
              grep "\.$"      | # SELECT CHARS NOT $RGBMAIN (= .)
              cut -d ":" -f 1 | # CUT LINE NUMBER
              tr -d '\n'      | # RM NEWLINES
              sed 's/./&,/g'  | # INSERT COMMA
              sed 's/,$//'`     # RM LAST COMMA
     cp $SVG $OUT
  
     for C in fill stroke
      do
       for STYLE in `sed 's/style="/\n&/g' $SVG | # GET STYLES
                     grep '^style='             | # SELECT STYLE
                     cut -d '"' -f 2            | # SEPARATE STYLES
                     egrep "$C:#[0-9a-fA-F]{6}" | # GREP FILL/STROKE
                     sort -u`                     # SORT/UNIQ
        do       
        COLOR=`echo $STYLE                          | #
               sed  "s/$C:#[0-9a-fA-F]\{6\}/\n&\n/" | #
               egrep "^$C:#[0-9a-fA-F]{6}$"         | #
               cut -d ":" -f 2 | sed 's/^#//'`        #

        if [ "$COLOR" != "ffffff" ] &&
           [ `echo $COLOR | egrep "$RGBMAIN" | wc -l` -gt 0 ]
        then
  
          CHECKRGBPLUS=`echo $COLOR      | # START WITH $FILL
                        cut -c $RGBPLUS  | # SELECT PLUS CHANNELS
                        sed 's/../\n&/g' | # PUT PAIRS ON NEWLINES
                        sed '/^$/d'      | # RM EMPTY LINES
                        sort -u | wc -l`   # SORT/UNIQ
 
          if [ "$CHECKRGBPLUS" == 1 ]
          then 
 
            LIGHTNESS=`echo $COLOR           | # START
                       sed 's/../\n&/g'      | # SEPARATE RGB CHANNELS
                       grep -v 'ff'          | # REMOVE FULL CHANNELS
                       uniq                  | # UNIQ GRAY CHANNELS
                       tr -d '\n'`             # RM NEWLINES
            OPACITY=`echo $STYLE                          | # START WITH $STYLE
                     sed "s/$C-opacity:[0-9\.]*/\n&\n/"   | # PUT ON NEWLINE
                     grep "^$C-opacity" | cut -d ":" -f 2 | # SELECT
                     sed 's/\.//' | sed 's/0*$//'`            # RM '.' AND ZEROS AT END
  
            if [ "$OPACITY" != "" ] &&
               [ "$OPACITY" != 1  ]
            then OPACITY=`echo ${OPACITY}0000 | # PAD WITH ZEROS
                          cut -c 1-4          | # SELECT FOUR DIGITS
                          sed 's/^0*//'`        # RM LEADING BLANKS
                 LIGHTNESS=`map $OPACITY 0 1000 255 0`
                 LIGHTNESS=`echo "obase=16;$LIGHTNESS" | bc | #
                            tr [:upper:] [:lower:]`
                 OPACITY=",OPACITY:$OPACITY"
            else OPACITY=""
 
            fi
 
           NEWCOLOR="XXXX:#$LIGHTNESS$LIGHTNESS$LIGHTNESS"  # MAKE IT GRAY
           NEWSTYLE=`echo $STYLE                          | # START WITH $STYLE
                     sed "s/$C:#[0-9a-f]\{6\}/$NEWCOLOR/" | # REPLACE FILL WITH $NEWFILL
                     sed "s/$C-opacity:[0-9\.]*;*//"`       # REMOVE OPACITY
 
          #echo "$C:$COLOR (BASECOLOR:#$BASECOLOR,LIGHTNESS:$LIGHTNESS$OPACITY)"
 
           sed -i "s/$STYLE/$NEWSTYLE/g"             $OUT
 
          fi
        fi
  
       done
  
     sed -i "s/$C:#ffffff/PROTECTWHITE/g"     $OUT
     sed -i "s/$C:#[0-9a-f]\{6\}/$C:none/g"   $OUT
     sed -i "s/XXXX:/$C:/g"                   $OUT
     sed -i "s/PROTECTWHITE/fill:#ffffff/g"   $OUT
     sed -i "s/display:none/display:inline/g" $OUT
  
     done

  )}
# --------------------------------------------------------------------------- #
  function mkpages() {(

       PDFSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
               egrep "\.svg$|\.pdf$"       | # SELECT ENDING WITH .svg/.pdf
               head -n 1`                    # SELECT FIRST
       OUTID=`echo $* | sed 's/ /\n/g'     | # SPACES TO NEWLINES
              egrep "\.id$"                | # SELECT ENDING WITH .id
              rev | cut -d "." -f 2- | rev | # RM EXTENSION
              tail -n 1`                     # SELECT FIRST
   
       KEEPTMP=`echo $* | sed 's,--,\n--,g' | #
                grep -- "--keeptmp" | wc -l`  #
   
       if [ "$KEEPTMP" -lt 1 ];then
            PDFOUT=${TMPID}${OUTID}
            SVGTMP=${TMPID}`echo $PDFSRC | #
                            md5sum       | #
                            cut -c 4-9`.svg
       else TMPKEEP="$TMPDIR/tmpspread"
            PDFOUT=${TMPKEEP}${OUTID}
            SVGTMP=${TMPKEEP}`echo $PDFOUT | #
                              md5sum       | #
                              cut -c 4-9`.svg
       fi

       if [ `ls $PDFOUT*  2>/dev/null | wc -l` -gt 0 ]
       then echo "$PDFOUT exists"
       else getFile $PDFSRC $SVGTMP
            if [ "$SUCCESS" == "YES" ]; then
                 SVGTMP=`realpath $SVGTMP`
                 svglayers2pdfpages $SVGTMP $PDFOUT
            fi 
       fi
  )}
# --------------------------------------------------------------------------- #
  function svglayers2pdfpages() {

     CROP="0.00"
     SVGLAYER="$1";OUTPUTNAME="$2"
     SL2PPID=`echo $1 | md5sum | cut -c 1-8`
     SUPERTMP=${TMPID}.`echo $SVGLAYER | md5sum | cut -c 1-4`.tmp
     CANVASWIDTH=`sed ':a;N;$!ba;s/\n//g' $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/width=/\n&/g'              | # EXTRACT WIDTH
                  grep "^width="                    | # EXTRACT WIDTH
                  cut -d "\"" -f 2                  | # EXTRACT WIDTH VALUE
                  head -n 1`                          # FIRST WIDTH ONLY
      LAYERNAMES=`sed ':a;N;$!ba;s/\n//g' $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/>/&\n/g'                   | # ALL '>' ON NEWLINE
                  sed '/<g/s/scape:label/\nlabel/'  | # PUT NAME LABEL ON NL
                  grep -n ^label                    | # SELECT LABELS
                  cut -d "\"" -f 1,2                | # EXTRACT LABELS
                  sort -t= -k 2 -u | sort -n        | # SORT/UNIQ + SORT NUM
                  grep -v "=\"XX_"                  | # IGNORE XX LAYERS
                  cut -d '"' -f 2`                    # EXTRACT NAMES

      BFOO=NL`echo ${RANDOM} | cut -c 1`F00
      SFOO=SP`echo ${RANDOM} | cut -c 1`F0O
     LOPEN=LA`echo ${RANDOM} | cut -c 2`F0P
   # ----------------------------------------------------------------------- #
   # MOVE LAYERS ON SEPARATE LINES (TEMPORARILY; EASIFY PARSING LATER ON)
   # ----------------------------------------------------------------------- #
     sed ":a;N;\$!ba;s/\n/$BFOO/g" $SVGLAYER | # RM ALL LINEBREAKS (BUT SAVE)
     sed "s/ /$SFOO/g"                       | # RM ALL SPACE (BUT SAVE)
     sed 's/<g/\n<g/g'                       | # REDO GROUP OPEN + NEWLINE
     sed "/mode=\"layer\"/s/<g/$LOPEN/g"     | # PLACEHOLDER FOR LAYERGROUP OPEN
     sed ':a;N;$!ba;s/\n//g'                 | # RM ALL LINEBREAKS (AGAIN)
     sed "s/$LOPEN/\n<g/g"                   | # REDO LAYERGROUP OPEN + NEWLINE
     sed '/^[ ]*$/d'                         | # RM EMPTY LINES
     sed 's/<\/svg>/\n&/g'                   | # PUT SVG CLOSE ON NEW LINE
     sed 's/display:none/display:inline/g'   | # MAKE VISIBLE EVEN WHEN HIDDEN
     tee > ${SUPERTMP}                         # WRITE TO TEMPORARY FILE

   # ----------------------------------------------------------------------- #
   # WRITE LAYERS TO SEPARATE FILES AND TRANSFORM TO PDF 
   # ----------------------------------------------------------------------- #
     COUNT=1 
     for LAYERNAME in $LAYERNAMES
      do for PAGE in 1 2
         do  if [ $PAGE -eq 1 ]; then
                  XSHIFT=-$CROP
             else XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
             fi
             TRANSFORM="transform=\"translate($XSHIFT,0)\""
             NUM=`echo 0000$COUNT | rev | cut -c 1-4 | rev`
             LNAME=`echo $LAYERNAME | md5sum | cut -c 1-6`
             PAGENAME="${TMPID}${SL2PPID}_${NUM}_${LNAME}"
             
             head -n 1 ${SUPERTMP}  | # THE HEADER
             sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
             sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
             tee                    >   ${PAGENAME}.svg
             echo "<g $TRANSFORM>"  >>  ${PAGENAME}.svg
             grep "inkscape:label=\"$LAYERNAME\"" ${SUPERTMP} | #
             sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
             sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
             tee                    >>  ${PAGENAME}.svg
             echo "</g>"            >>  ${PAGENAME}.svg
             echo "</svg>"          >>  ${PAGENAME}.svg

             COUNT=`expr $COUNT + 1`
         done
     done
   # ----------------------------------------------------------------------- #
    for COLOR in $ALLCOLORS
     do
   # ----------------------------------------------------------------------- #
   # MAKE MULTIPAGE PDF
   # ----------------------------------------------------------------------- #
     for PAGE in `ls ${TMPID}${SL2PPID}*.svg | #
                  rev | cut -d "." -f 2- | rev`
      do cp ${PAGE}.svg ${TMPID}.svg
         selectColor ${TMPID}.svg ${TMPID}.tmp $COLOR
         mv ${TMPID}.tmp ${TMPID}.svg
         inkscape --export-pdf=${PAGE}.pdf \
                  --export-text-to-path ${TMPID}.svg
     done
   # ----------------------------------------------------------------------- #
   # MAKE MULTIPAGE PDF
   # ----------------------------------------------------------------------- #
     pdftk ${TMPID}${SL2PPID}_*.pdf cat output ${OUTPUTNAME}${COLOR}.pdf

   # ----------------------------------------------------------------------- #
    done
   # ----------------------------------------------------------------------- #
   # CLEAN UP (OBSOLETE?)
   # ----------------------------------------------------------------------- #
     rm ${TMPID}${SL2PPID}_*.pdf $SVGLAYER ${TMPID}${SL2PPID}_*.svg
   # ----------------------------------------------------------------------- #


  }
# --------------------------------------------------------------------------- #
# CREATE UNIQUE NAME FOR MACROS USED HERE
# --------------------------------------------------------------------------- #

  SPREADMACRO="\\"`echo spread+txt$SHSRCID | md5sum | base64   | #
                   tr [:upper:] [:lower:]  | sed 's/[^a-z]//g' | #
                   cut -c 1-12`

  if [ `grep ${SPREADMACRO} $SRCDUMP | wc -l` -lt 1 ]
  then        
        write2src " % ------------------------------------------------ %"
        write2src "   \newcommand${SPREADMACRO}[2]{%"
        write2src "    \AddToShipoutPictureFG*{%"
        write2src "    \opacity{1.0}% SET TO 100%"
        write2src "    \setlength{\unitlength}{\paperwidth}"
        write2src "    \put(0,0){\colorbox{white}{%"
        write2src "              \makebox(1,1.4){}}}"
        write2src "    \includegraphics[width=\paperwidth,page=#2]{#1}"
        write2src "    }"
        write2src "    \vspace*{.5\textheight}\newpage"
        write2src "   }"
        write2src " % ------------------------------------------------ %"
  fi 

# --------------------------------------------------------------------------- #

function SPREAD() {


   SRC="$1";OUTID=`echo $SRC | sed 's/^[ ]*//' | #
                   cut -d " " -f 1 | md5sum    | #
                   cut -c 1-8`"COLOR"

   mkpages $SRC ${OUTID}.id  --keeptmp

   PDFUSE=`ls ${TMPDIR}/*${OUTID}*.pdf | head -n 1`

   FIRSTPAGEIS="" # RESET
   NUMPAGES=`pdftk $PDFUSE dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

 # EXTRACT PAGE FLAG VALUES
 # ------------------------------------------------------------------------ #
   PAGES=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          egrep -v "^-|-$"            | # IGNORE ISOLATED - 
          grep -v "^[ ]*$" | tail -n 1` # 
   if   [ `echo $PAGES | wc -c` -le 1 ] # PAGES ARE NOT SET
   then  PAGES="-"
   elif [ `echo $PAGES | grep "^[0-9]" | # PAGES DO ACTUALLY ...
           wc -l` -ge 1 ]                # ... START WITH A NUMBER
   then  P1=`echo $PAGES | cut -d "-" -f 1` # SET P1 TO NUM BEFORE DASH
         P2=`echo $PAGES               | # DISPLAY PAGE FLAG
             sed 's/^[0-9]*-/-/'       | # CONVERT LEADING NUMBERS TO DASH
             grep "-" | cut -d "-" -f 2` # SELECT AND CUT LEADING DASH
   else  PAGES="-" ; PAGECOMMAND=""; fi      # DEFINE FALLBACK

 # CONFORM PAGE VALUES
 # ------------------------------------------------------------------------ #
   if [ "$P1" != "" ] # IF P1 IS SET
   then if [ "$P1" -gt "$NUMPAGES" ];then P1="$NUMPAGES"; fi;fi

   if [ "$P2" != "" ]                 # IF P2 IS SET
    then if [ "$P2" -gt "$NUMPAGES" ] # IF P2 IS GREATER THAN MAX PAGE NUMBER ...
         then P2="$NUMPAGES"          # ... SET TO MAX PAGE NUMBER
         fi;  PAGESEQ=`seq $P1 $P2`   # SET PAGE SEQUENCE
         if [ "$P2" -lt "$P1" ]       # IF P2 IS BIGGER THAN P1
         then PAGESEQ=`seq $P2 $P1  | # START PAGE SEQUENCE FROM LOWER VALUE
                       tac`           # ... AND REVERT
         fi
   else PAGESEQ="$P1"                 # IF P2 IS NOT SET PAGE SEQUENCE = P1
   fi
   if [ "$PAGES" == "-" ];then        # IF PAGE FLAG REQUIRES ALL ...
         P1="1";P2="$NUMPAGES"        # ... SET PAGE SEQUENCE ...
         PAGESEQ=`seq $P2`            # ... TO MAX PAGE NUMBER
   fi

   if [ `python -c "print $P1 / 2.0" | # DIVIDE BY 2
         cut -d "." -f 2` -lt 1 ]      # CUT AND CHECK VALUE AFTER .
   then  FIRSTPAGEIS="even"            # IF = 0 -> PAGE IS EVEN
   else  FIRSTPAGEIS="odd"             # IF > 0 -> PAGE IS ODD
   fi    

   if   [ "$FIRSTPAGEIS" == "odd" ]; then
           PAGECOMMAND="\cleartoleft"
   elif [ "$FIRSTPAGEIS" == "even" ]; then
           PAGECOMMAND="\cleartoright"
   else  # ALL PAGES -> P1 = 1
           PAGECOMMAND="\cleartoleft"
   fi

 # ALLOW IRREGULAR PLACEMENT
 # ----
   if [ `echo $PAGES | grep -v "-" | # RM - AND 0-9 => 2 -gt 0
         wc -l` -gt 0 ];then  PAGECOMMAND=""; fi

   if [ -f $PDFUSE ]
   then write2src "\grenewcommand{\pushpage}{}"
        write2src "\newpage"
        write2src "$PAGECOMMAND"
        for PAGENUM in $PAGESEQ
         do
            write2src "${SPREADMACRO}{$PDFUSE}{$PAGENUM}"
        done
        write2src "\grenewcommand{\pushpage}{\pusher}" 
   fi

}

# --------------------------------------------------------------------------- #

function BACKGROUND() {

   SRC="$1";OUTID=`echo $SRC | sed 's/^[ ]*//' | #
                   cut -d " " -f 1 | md5sum    | #
                   cut -c 1-8`"COLOR"

   mkpages $SRC ${OUTID}.id  --keeptmp

   PDFUSE=`ls ${TMPDIR}/*${OUTID}*.pdf | head -n 1`

   NUMPAGES=`pdftk $PDFUSE dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

   if [ -f $PDFGET ]
   then write2src "\setcounter{pageloopmax}{$NUMPAGES}"
        write2src "\renewcommand{\pageloopsrc}{$PDFUSE}"
   else write2src "\renewcommand{\pageloopsrc}{}"
   fi

}

# --------------------------------------------------------------------------- #

